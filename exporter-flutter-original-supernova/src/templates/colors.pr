import 'package:flutter/material.dart';

// Base colors class
class AppColorValues {
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, colorToken.name) /]}
  {[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
  {[ if (colorToken.description && colorToken.description !== "") ]}
{{ createDocumentationComment(colorToken.description, "  ") }}
  {[/]}
  static const {{ fullTokenName }} = {[ inject "export_color_value" context colorToken.value /]};
  {[/]}
{[/]}

  AppColorValues._();
}

// Theme-aware colors extension
class AppColors extends ThemeExtension<AppColors> {
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, colorToken.name) /]}
  {[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
  {[ if (colorToken.name.startsWith("--")) ]}
  final Color {{ getSemanticName(colorToken.name) }};
  {[/]}
  {[/]}
{[/]}

  const AppColors({
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ if (colorToken.name.startsWith("--")) ]}
    required this.{{ getSemanticName(colorToken.name) }},
  {[/]}
  {[/]}
{[/]}
  });

  @override
  AppColors copyWith({
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ if (colorToken.name.startsWith("--")) ]}
    Color? {{ getSemanticName(colorToken.name) }},
  {[/]}
  {[/]}
{[/]}
  }) {
    return AppColors(
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ if (colorToken.name.startsWith("--")) ]}
      {{ getSemanticName(colorToken.name) }}: {{ getSemanticName(colorToken.name) }} ?? this.{{ getSemanticName(colorToken.name) }},
  {[/]}
  {[/]}
{[/]}
    );
  }

  @override
  ThemeExtension<AppColors> lerp(ThemeExtension<AppColors>? other, double t) {
    if (other is! AppColors) {
      return this;
    }
    return AppColors(
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ if (colorToken.name.startsWith("--")) ]}
      {{ getSemanticName(colorToken.name) }}: Color.lerp({{ getSemanticName(colorToken.name) }}, other.{{ getSemanticName(colorToken.name) }}, t)!,
  {[/]}
  {[/]}
{[/]}
    );
  }

  // Light theme values
  static AppColors get light => const AppColors(
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ if (colorToken.name.startsWith("--")) ]}
    {{ getSemanticName(colorToken.name) }}: AppColorValues.{{ arrayJoin(arrayConcat(fullTokenGroupPath, colorToken.name), " ").camelcased(false) }},
  {[/]}
  {[/]}
{[/]}
  );

  // Dark theme values
  static AppColors get dark => AppColors(
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ if (colorToken.name.startsWith("--")) ]}
    {[ const tokenId = arrayJoin(arrayConcat(fullTokenGroupPath, colorToken.name), " ").camelcased(false) /]}
    {{ getSemanticName(colorToken.name) }}: Color(0xFF474949), // Placeholder - will need to be manually updated
  {[/]}
  {[/]}
{[/]}
  );
}

// Theme configuration
class AppTheme {
  static ThemeData lightTheme = ThemeData.light().copyWith(
    extensions: [AppColors.light],
  );

  static ThemeData darkTheme = ThemeData.dark().copyWith(
    extensions: [AppColors.dark],
  );
}

// Extension method for easy access
extension AppThemeExtension on BuildContext {
  AppColors get colors => Theme.of(this).extension<AppColors>()!;
}
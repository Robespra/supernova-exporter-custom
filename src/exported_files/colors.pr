import 'package:flutter/material.dart';

class AppColors {

{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, colorToken.name) /]}
  {[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
  {[ if (colorToken.description && colorToken.description !== "") ]}
{{ createDocumentationComment(colorToken.description, "  ") }}
  {[/]}
  static const {{ fullTokenName }} = {[ inject "export_color_value" context colorToken.value /]};

  {[/]}
{[/]}

  // Helper method for theme-aware colors
  static Color getThemeColor(Color light, Color dark, BuildContext context) {
    return Theme.of(context).brightness == Brightness.light ? light : dark;
  }

  AppColors._();
}

// Theme extension for easier access
extension AppThemeExtension on BuildContext {
  // Helper method
  Color _getThemeColor(Color light, Color dark) {
    return Theme.of(this).brightness == Brightness.light ? light : dark;
  }

  // Semantic color getters with values from your design system
  Color get textColor => _getThemeColor(
    AppColors.semanticColorText,
    const Color(0xFFF6F6F6)  // --text dark value
  );

  Color get basicContrastTextColor => _getThemeColor(
    AppColors.semanticColorBasicContrastText,
    const Color(0xFFFFFFFF)  // --basicContrastText dark value
  );

  Color get basicContrastOppositeColor => _getThemeColor(
    AppColors.semanticColorBasicContrastOpposite,
    const Color(0xFF1D1D1D)  // --basicContrastOpposite dark value
  );

  Color get colorlogoLineColor => _getThemeColor(
    AppColors.semanticColorColorlogoLine,
    const Color(0xFFFFFFFF)  // --colorlogoLine dark value
  );

  Color get backgroundColor => _getThemeColor(
    AppColors.semanticColorBackground,
    const Color(0xFF1C1C1B)  // --background dark value
  );

  Color get backgroundNavColor => _getThemeColor(
    AppColors.semanticColorBackgroundNav,
    const Color(0xFF2C2D2D)  // --backgroundNav dark value
  );

  Color get backgroundNavStrongerColor => _getThemeColor(
    AppColors.semanticColorBackgroundNavStronger,
    const Color(0xFF474949)  // --backgroundNavStronger dark value
  );

  Color get greyColor => _getThemeColor(
    AppColors.semanticColorGrey,
    const Color(0xFFA3A3A3)  // --grey dark value
  );

  Color get greyDarkerColor => _getThemeColor(
    AppColors.semanticColorGreyDarker,
    const Color(0xFF515151)  // --greyDarker dark value
  );

  Color get backgroundCardsColor => _getThemeColor(
    AppColors.semanticColorBackgroundCards,
    const Color(0xFF2C2D2D)  // --backgroundCards dark value
  );

  Color get sucessPromoColor => _getThemeColor(
    AppColors.semanticColorSucessPromo,
    const Color(0xFF48BF73)  // --sucessPromo dark value
  );

  Color get warningYellowColor => _getThemeColor(
    AppColors.semanticColorWarningYellow,
    const Color(0xFFECCB57)  // --warningYellow dark value
  );

  Color get brandRedColor => _getThemeColor(
    AppColors.semanticColorBrandRed,
    const Color(0xFFCB1617)  // --brandRed dark value
  );

  // Additional for nightShow semantic color
  Color get nightShowColor => _getThemeColor(
    AppColors.semanticColorNightShow,
    const Color(0xFF3D70A2)  // --nightShow dark value
  );
}
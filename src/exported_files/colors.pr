import 'package:flutter/material.dart';

class AppColors extends ThemeExtension<AppColors> {
  {[ let brand = ds.currentBrand() /]}
  {[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
  {[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
    {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
    {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
    {[ for colorToken in colorTokenInGroups ]}
      {[ if colorToken.name.startsWith("--") ]}
  final Color {{ getSemanticName(colorToken.name) }};
      {[/]}
    {[/]}
  {[/]}

  const AppColors({
    {[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
      {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
      {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
      {[ for colorToken in colorTokenInGroups ]}
        {[ if colorToken.name.startsWith("--") ]}
    required this.{{ getSemanticName(colorToken.name) }},
        {[/]}
      {[/]}
    {[/]}
  });

  @override
  AppColors copyWith({
    {[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
      {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
      {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
      {[ for colorToken in colorTokenInGroups ]}
        {[ if colorToken.name.startsWith("--") ]}
    Color? {{ getSemanticName(colorToken.name) }},
        {[/]}
      {[/]}
    {[/]}
  }) {
    return AppColors(
      {[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
        {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
        {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
        {[ for colorToken in colorTokenInGroups ]}
          {[ if colorToken.name.startsWith("--") ]}
      {{ getSemanticName(colorToken.name) }}: {{ getSemanticName(colorToken.name) }} ?? this.{{ getSemanticName(colorToken.name) }},
          {[/]}
        {[/]}
      {[/]}
    );
  }

  @override
  ThemeExtension<AppColors>? lerp(covariant AppColors? other, double t) {
    if (other is! AppColors) {
      return this;
    }
    return AppColors(
      {[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
        {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
        {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
        {[ for colorToken in colorTokenInGroups ]}
          {[ if colorToken.name.startsWith("--") ]}
      {{ getSemanticName(colorToken.name) }}: Color.lerp({{ getSemanticName(colorToken.name) }}, other.{{ getSemanticName(colorToken.name) }}, t)!,
          {[/]}
        {[/]}
      {[/]}
    );
  }
}

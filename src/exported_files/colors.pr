import 'package:flutter/material.dart';

class AppColors {
{[ let brand = ds.currentBrand() /]}
{[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, colorToken.name) /]}
  {[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
  {[ if (colorToken.description && colorToken.description !== "") ]}
{{ createDocumentationComment(colorToken.description, "  ") }}
  {[/]}
  static const {{ fullTokenName }} = {[ inject "export_color_value" context colorToken.value /]};

  {[/]}
{[/]}

  // Theme color maps
  static const Map<String, Map<Brightness, Color>> themeColors = {
{[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
  {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
  {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
  {[ for colorToken in colorTokenInGroups ]}
  {[ if colorToken.name && colorToken.name.startsWith("--") ]}
  {[ const semanticName = colorToken.name.substring(2) /]}
    '{{ semanticName }}': {
      Brightness.light: semanticColor{{ semanticName.charAt(0).toUpperCase() + semanticName.slice(1) }},
      Brightness.dark: const Color(0x{{ colorToken.value.dark ? colorToken.value.dark.hex : "FFFFFFFF" }}),
    },
  {[/]}
  {[/]}
{[/]}
  };

  // Get a theme-aware color dynamically
  static Color getThemeColor(BuildContext context, String name) {
    final brightness = Theme.of(context).brightness;
    return themeColors[name]?[brightness] ??
           (brightness == Brightness.light ? Colors.black : Colors.white);
  }

  AppColors._();
}

// Extension for easier theme color access
extension AppThemeExtension on BuildContext {
  Color getSemanticColor(String name) {
    return AppColors.getThemeColor(this, name);
  }

  // Convenience getters for commonly used semantic colors
  Color get textColor => getSemanticColor('text');
  Color get backgroundNavColor => getSemanticColor('backgroundNav');
  Color get backgroundColor => getSemanticColor('background');
  Color get basicContrastTextColor => getSemanticColor('basicContrastText');
  Color get basicContrastOppositeColor => getSemanticColor('basicContrastOpposite');
}
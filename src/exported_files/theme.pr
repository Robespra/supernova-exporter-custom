import 'package:flutter/material.dart';
import 'colors.dart';

class AppTheme {
  static ThemeData lightTheme() {
    final colors = AppColors(
      {[ let brand = ds.currentBrand() /]}
      {[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
      {[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
        {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
        {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
        {[ for colorToken in colorTokenInGroups ]}
        {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, colorToken.name) /]}
        {[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
        {[ if colorToken.value.light ]}
          {[ if colorToken.value.light.opacity ]}
        {{ fullTokenName }}: const {[ inject "export_color_value" context colorToken.value.light.color /]}.withOpacity({{ colorToken.value.light.opacity }}),
          {[ else ]}
        {{ fullTokenName }}: const {[ inject "export_color_value" context colorToken.value.light /]},
          {[/]}
        {[/]}
        {[/]}
      {[/]}
    );

    return ThemeData(
      brightness: Brightness.light,
      colorScheme: ColorScheme.light(
        background: colors.background,
        surface: colors.backgroundNav,
        primary: colors.brandRed,
        onBackground: colors.text,
        onSurface: colors.text,
      ),
      scaffoldBackgroundColor: colors.background,
      textTheme: TextTheme(
        bodyLarge: TextStyle(color: colors.text),
        bodyMedium: TextStyle(color: colors.text),
        bodySmall: TextStyle(color: colors.text),
      ),
      extensions: [colors],
    );
  }

  static ThemeData darkTheme() {
    final colors = AppColors(
      {[ let brand = ds.currentBrand() /]}
      {[ const colorTokensTree = ds.tokenGroupTreeByType("Color", brand.id) /]}
      {[ traverse colorTokensTree property subgroups into colorTokenGroup ]}
        {[ let fullTokenGroupPath = createFullTokenGroupPath(colorTokenGroup) /]}
        {[ const colorTokenInGroups = ds.tokensByGroupId(colorTokenGroup.id) /]}
        {[ for colorToken in colorTokenInGroups ]}
        {[ const fullTokenPath = arrayConcat(fullTokenGroupPath, colorToken.name) /]}
        {[ const fullTokenName = arrayJoin(fullTokenPath, " ").camelcased(false) /]}
        {[ if colorToken.value.dark ]}
          {[ if colorToken.value.dark.opacity ]}
        {{ fullTokenName }}: const {[ inject "export_color_value" context colorToken.value.dark.color /]}.withOpacity({{ colorToken.value.dark.opacity }}),
          {[ else ]}
        {{ fullTokenName }}: const {[ inject "export_color_value" context colorToken.value.dark /]},
          {[/]}
        {[/]}
        {[/]}
      {[/]}
    );

    return ThemeData(
      brightness: Brightness.dark,
      colorScheme: ColorScheme.dark(
        background: colors.background,
        surface: colors.backgroundNav,
        primary: colors.brandRed,
        onBackground: colors.text,
        onSurface: colors.text,
      ),
      scaffoldBackgroundColor: colors.background,
      textTheme: TextTheme(
        bodyLarge: TextStyle(color: colors.text),
        bodyMedium: TextStyle(color: colors.text),
        bodySmall: TextStyle(color: colors.text),
      ),
      extensions: [colors],
    );
  }

  /// Get the current theme colors
  static AppColors colorsOf(BuildContext context) {
    return Theme.of(context).extension<AppColors>()!;
  }
}